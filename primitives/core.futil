extern "core.sv" {

  /// Primitives
  primitive std_const<"share"=1>[WIDTH, value]() -> (out: WIDTH);
  primitive std_slice<"share"=1>[IN_WIDTH, OUT_WIDTH](in: IN_WIDTH) -> (out: OUT_WIDTH);
  primitive std_pad<"share"=1>[IN_WIDTH, OUT_WIDTH](in: IN_WIDTH) -> (out: OUT_WIDTH);

  /// Logical operators
  primitive std_not<"share"=1>[WIDTH](in: WIDTH) -> (out: WIDTH);
  primitive std_and<"share"=1>[WIDTH](left: WIDTH, right: WIDTH) -> (out: WIDTH);
  primitive std_or<"share"=1>[WIDTH](left: WIDTH, right: WIDTH) -> (out: WIDTH);
  primitive std_xor<"share"=1>[WIDTH](left: WIDTH, right: WIDTH) -> (out: WIDTH);

  /// Memories
  primitive std_reg<"static"=1>[WIDTH](
    in: WIDTH,
    @go(1) write_en: 1,
    clk: 1
  ) -> (
    out: WIDTH,
    @done(1) done: 1
  );

  primitive std_mem_d1<"static"=1>[WIDTH, SIZE, IDX_SIZE](
    addr0: IDX_SIZE,
    write_data: WIDTH,
    @go(1) write_en: 1,
    clk: 1
  ) -> (
    read_data: WIDTH,
    @done(1) done: 1
  );

  primitive std_mem_d2<"static"=1>[WIDTH, D0_SIZE, D1_SIZE, D0_IDX_SIZE, D1_IDX_SIZE](
    addr0: D0_IDX_SIZE,
    addr1: D1_IDX_SIZE,
    write_data: WIDTH,
    @go(1) write_en: 1,
    clk: 1
  ) -> (
    read_data: WIDTH,
    @done(1) done: 1
  );

  primitive std_mem_d3<"static"=1>[
      WIDTH,
      D0_SIZE,
      D1_SIZE,
      D2_SIZE,
      D0_IDX_SIZE,
      D1_IDX_SIZE,
      D2_IDX_SIZE
  ] (
    addr0: D0_IDX_SIZE,
    addr1: D1_IDX_SIZE,
    addr2: D2_IDX_SIZE,
    write_data: WIDTH,
    @go(1) write_en: 1,
    clk: 1
  ) -> (
    read_data: WIDTH,
    @done(1) done: 1
  );

  primitive std_mem_d4<"static"=1>[
      WIDTH,
      D0_SIZE,
      D1_SIZE,
      D2_SIZE,
      D3_SIZE,
      D0_IDX_SIZE,
      D1_IDX_SIZE,
      D2_IDX_SIZE,
      D3_IDX_SIZE
  ] (
    addr0: D0_IDX_SIZE,
    addr1: D1_IDX_SIZE,
    addr2: D2_IDX_SIZE,
    addr3: D3_IDX_SIZE,
    write_data: WIDTH,
    @go(1) write_en: 1,
    clk: 1
  ) -> (
    read_data: WIDTH,
    @done(1) done: 1
  );
}
